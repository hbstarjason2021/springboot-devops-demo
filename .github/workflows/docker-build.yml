name: 'DIY构建镜像并推送至dockerhub'

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      imageName:
        description: '构建镜像的名称'
        required: true
      repoPath:
        description: 'git仓库路径'
        required: true
      dockerFileUrl:
        description: '自定义DockerFile下载路径,可空'
        required: false
      shellUrl:
        description: '自定义构建前脚本下载路径,可空'
        required: false
      shell:
        description: '构建前运行shell命令,执行mv Dockerfile等操作'
        required: false
      platforms:
        description: '需要构建的平台'
        required: false
        default: linux/amd64,linux/arm64/v8
      tags:
        description: '自定义dockerTags,逗号分隔,默认为时间'
        type: secrets
        required: false
      tmpUsername:
        description: '用户名,覆盖环境变量,可空'
        required: false
        type: secrets
      tmpToken:
        description: 'token,覆盖环境变量,可空,可密码'
        required: false
        type: secrets
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Shanghai

      # 克隆目标,并且准备上下文
      - name: Git clone
        id: redy
        run: |
         rm -rf {*,.[^.]*,..?*}
         git clone "${{github.event.inputs.repoPath}}" .
         if [[ "${{ github.event.inputs.dockerFileUrl }}" ]] ;then wget "${{github.event.inputs.dockerFileUrl}}" -O ./Dockerfile ; fi
         if [[ "${{ github.event.inputs.shellUrl }}" ]] ;then wget "${{github.event.inputs.shellUrl}}" -O /tmp/.customize_shell.sh ; chmod +x /tmp/.customize_shell.sh && /tmp/.customize_shell.sh; fi
         if [[ "${{ github.event.inputs.shell }}" ]] ;then ""${{github.event.inputs.shell}} ; fi
         githubUsername=${{ secrets.DOCKER_HUB_USERNAME }}
         githubPassword=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
         if [[ "${{ github.event.inputs.tmpUsername }}" ]] ;then githubUsername="${{github.event.inputs.tmpUsername}}" ; fi
         if [[ "${{ github.event.inputs.tmpToken }}" ]] ;then githubPassword="${{github.event.inputs.tmpToken}}" ; fi
         echo "githubUsername=$githubUsername" >> $GITHUB_OUTPUT
         echo "githubPassword=$githubPassword" >> $GITHUB_OUTPUT

      # docker login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.redy.outputs.githubUsername }}
          password: ${{ steps.redy.outputs.githubPassword }}

      # 设置 docker buildx 环境
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # build 前置操作
      - name: Docker before
        id: docker_before
        run: |
          image="${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.inputs.imageName }}"
          echo "original image $image"
          arr=(${image//\// })
          image=""
          var_len=${#arr[*]}
          var_start=$(($var_len - 2))
          var_end=$(($var_len - 1))
          for ((i=$var_start; i<=$var_end ; i ++)); do image="${image}/${arr[$i]}"; done
          image=${image:1}
          tags="$image:latest,$image:$(date +'%m-%d_%H-%M-%S')"
          echo "original tags $tags"
          t="${{github.event.inputs.tags}}"
          if [[ "$t" ]] ; then
            echo "customize tags $t"
            arr=(${t//,/ })
            for i in ${arr[*]}; do image="${image}/$i"; done
          fi
          echo "target images $tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes > /dev/null 2>&1

      # build 并且 push docker 镜像
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{steps.docker_before.outputs.tags}}
          platforms: ${{github.event.inputs.platforms}}
      
      # 打印 docker 镜像 SHA256 Hash 值
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
